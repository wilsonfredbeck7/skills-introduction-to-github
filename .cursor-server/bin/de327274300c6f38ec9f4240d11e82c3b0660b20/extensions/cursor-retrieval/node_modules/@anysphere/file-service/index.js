const{existsSync,readFileSync}=require("fs"),{join}=require("path"),{platform,arch}=process;let nativeBinding=null,localFileExisted=!1,loadError=null;function isMusl(){if(process.report&&"function"==typeof process.report.getReport){const{glibcVersionRuntime:e}=process.report.getReport().header;return!e}try{const e=require("child_process").execSync("which ldd").toString().trim();return readFileSync(e,"utf8").includes("musl")}catch(e){return!0}}switch(platform){case"android":switch(arch){case"arm64":localFileExisted=existsSync(join(__dirname,"file_service.android-arm64.node"));try{nativeBinding=localFileExisted?require("./file_service.android-arm64.node"):require("@anysphere/file-service-android-arm64")}catch(e){loadError=e}break;case"arm":localFileExisted=existsSync(join(__dirname,"file_service.android-arm-eabi.node"));try{nativeBinding=localFileExisted?require("./file_service.android-arm-eabi.node"):require("@anysphere/file-service-android-arm-eabi")}catch(e){loadError=e}break;default:throw new Error(`Unsupported architecture on Android ${arch}`)}break;case"win32":switch(arch){case"x64":localFileExisted=existsSync(join(__dirname,"file_service.win32-x64-msvc.node"));try{nativeBinding=localFileExisted?require("./file_service.win32-x64-msvc.node"):require("@anysphere/file-service-win32-x64-msvc")}catch(e){loadError=e}break;case"ia32":localFileExisted=existsSync(join(__dirname,"file_service.win32-ia32-msvc.node"));try{nativeBinding=localFileExisted?require("./file_service.win32-ia32-msvc.node"):require("@anysphere/file-service-win32-ia32-msvc")}catch(e){loadError=e}break;case"arm64":localFileExisted=existsSync(join(__dirname,"file_service.win32-arm64-msvc.node"));try{nativeBinding=localFileExisted?require("./file_service.win32-arm64-msvc.node"):require("@anysphere/file-service-win32-arm64-msvc")}catch(e){loadError=e}break;default:throw new Error(`Unsupported architecture on Windows: ${arch}`)}break;case"darwin":localFileExisted=existsSync(join(__dirname,"file_service.darwin-universal.node"));try{nativeBinding=localFileExisted?require("./file_service.darwin-universal.node"):require("@anysphere/file-service-darwin-universal");break}catch{}switch(arch){case"x64":localFileExisted=existsSync(join(__dirname,"file_service.darwin-x64.node"));try{nativeBinding=localFileExisted?require("./file_service.darwin-x64.node"):require("@anysphere/file-service-darwin-x64")}catch(e){loadError=e}break;case"arm64":localFileExisted=existsSync(join(__dirname,"file_service.darwin-arm64.node"));try{nativeBinding=localFileExisted?require("./file_service.darwin-arm64.node"):require("@anysphere/file-service-darwin-arm64")}catch(e){loadError=e}break;default:throw new Error(`Unsupported architecture on macOS: ${arch}`)}break;case"freebsd":if("x64"!==arch)throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);localFileExisted=existsSync(join(__dirname,"file_service.freebsd-x64.node"));try{nativeBinding=localFileExisted?require("./file_service.freebsd-x64.node"):require("@anysphere/file-service-freebsd-x64")}catch(e){loadError=e}break;case"linux":switch(arch){case"x64":if(isMusl()){localFileExisted=existsSync(join(__dirname,"file_service.linux-x64-musl.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-x64-musl.node"):require("@anysphere/file-service-linux-x64-musl")}catch(e){loadError=e}}else{localFileExisted=existsSync(join(__dirname,"file_service.linux-x64-gnu.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-x64-gnu.node"):require("@anysphere/file-service-linux-x64-gnu")}catch(e){loadError=e}}break;case"arm64":if(isMusl()){localFileExisted=existsSync(join(__dirname,"file_service.linux-arm64-musl.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-arm64-musl.node"):require("@anysphere/file-service-linux-arm64-musl")}catch(e){loadError=e}}else{localFileExisted=existsSync(join(__dirname,"file_service.linux-arm64-gnu.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-arm64-gnu.node"):require("@anysphere/file-service-linux-arm64-gnu")}catch(e){loadError=e}}break;case"arm":if(isMusl()){localFileExisted=existsSync(join(__dirname,"file_service.linux-arm-musleabihf.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-arm-musleabihf.node"):require("@anysphere/file-service-linux-arm-musleabihf")}catch(e){loadError=e}}else{localFileExisted=existsSync(join(__dirname,"file_service.linux-arm-gnueabihf.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-arm-gnueabihf.node"):require("@anysphere/file-service-linux-arm-gnueabihf")}catch(e){loadError=e}}break;case"riscv64":if(isMusl()){localFileExisted=existsSync(join(__dirname,"file_service.linux-riscv64-musl.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-riscv64-musl.node"):require("@anysphere/file-service-linux-riscv64-musl")}catch(e){loadError=e}}else{localFileExisted=existsSync(join(__dirname,"file_service.linux-riscv64-gnu.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-riscv64-gnu.node"):require("@anysphere/file-service-linux-riscv64-gnu")}catch(e){loadError=e}}break;case"s390x":localFileExisted=existsSync(join(__dirname,"file_service.linux-s390x-gnu.node"));try{nativeBinding=localFileExisted?require("./file_service.linux-s390x-gnu.node"):require("@anysphere/file-service-linux-s390x-gnu")}catch(e){loadError=e}break;default:throw new Error(`Unsupported architecture on Linux: ${arch}`)}break;default:throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)}if(!nativeBinding){if(loadError)throw loadError;throw new Error("Failed to load native binding")}const{DiffType,DiffClient,CommitFileStatus,CommitChainGetFiles,GitClient,GitGraph,RepositoryIndexer,MULTI_ROOT_ABSOLUTE_PATH,MerkleClient}=nativeBinding;module.exports.DiffType=DiffType,module.exports.DiffClient=DiffClient,module.exports.CommitFileStatus=CommitFileStatus,module.exports.CommitChainGetFiles=CommitChainGetFiles,module.exports.GitClient=GitClient,module.exports.GitGraph=GitGraph,module.exports.RepositoryIndexer=RepositoryIndexer,module.exports.MULTI_ROOT_ABSOLUTE_PATH=MULTI_ROOT_ABSOLUTE_PATH,module.exports.MerkleClient=MerkleClient;